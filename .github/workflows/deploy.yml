name: deploy-main

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat > ~/.ssh/config << EOF
          Host playground-umc-8th
            HostName ${{ secrets.EC2_HOST }}
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
          EOF

      - name: Test SSH Connection
        run: ssh playground-umc-8th "echo '‚úÖ SSH Connection Successful'"

      - name: Check for package.json changes
        id: check-package
        run: |
          CHANGED=$(git diff HEAD^1 --name-only | grep "package.json" || echo "")
          echo "changed=${CHANGED}" >> $GITHUB_OUTPUT

      - name: Get package-lock.json hash
        id: package-lock-hash
        run: |
          if ssh playground-umc-8th "test -f /home/ubuntu/coffect-BE/package-lock.json"; then
            REMOTE_HASH=$(ssh playground-umc-8th "md5sum /home/ubuntu/coffect-BE/package-lock.json | cut -d' ' -f1")
            LOCAL_HASH=$(md5sum package-lock.json | cut -d' ' -f1)
            if [ "$REMOTE_HASH" != "$LOCAL_HASH" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Backup and Sync Files
        run: |
          ssh playground-umc-8th '
            mkdir -p /home/ubuntu/coffect-BE-backup
            
            if [ -d /home/ubuntu/coffect-BE ]; then
              cp -r /home/ubuntu/coffect-BE/* /home/ubuntu/coffect-BE-backup/ 2>/dev/null || true
            fi
            
            mkdir -p /home/ubuntu/coffect-BE
          '
          
          git diff --name-only HEAD^1 HEAD | while read file; do
            if [ -f "$file" ] || [ -d "$file" ]; then
              rsync -avzr --relative "$file" playground-umc-8th:/home/ubuntu/coffect-BE/
            fi
          done

      - name: Install Dependencies if needed
        if: steps.check-package.outputs.changed != '' || steps.package-lock-hash.outputs.changed == 'true'
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            echo "üì¶ Installing dependencies..."
            npm ci --production=false
            echo "‚úÖ Dependencies installed"
          '

      - name: Create Environment File
        run: |
          ssh playground-umc-8th "cat > /home/ubuntu/coffect-BE/.env << 'EOF'
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          EC2_PORT=${{ secrets.EC2_PORT }}
          NODE_ENV=production
          EOF"

      - name: Verify Setup and Build
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            
            echo "üîç Verifying setup..."
            
            if [ ! -f package.json ]; then
              echo "‚ùå package.json not found"
              exit 1
            fi
            
            echo "üìã Available scripts:"
            npm run 2>&1 | grep -A 20 "available via" || echo "Could not list scripts"
            
            if [ -f .env ]; then
              echo "‚úÖ .env file created"
              echo "üìù Environment variables count: $(wc -l < .env)"
            else
              echo "‚ùå .env file missing"
              exit 1
            fi
            
            echo "üèóÔ∏è Building application..."
            if npm run build; then
              echo "‚úÖ Build successful"
            else
              echo "‚ùå Build failed"
              exit 1
            fi
            
            echo "üìÅ Post-build files:"
            ls -la
            
            for dir in dist build out; do
              if [ -d "$dir" ]; then
                echo "‚úÖ $dir directory exists"
                ls -la "$dir" | head -5
              fi
            done
          '

      - name: Stop Existing Application
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            
            echo "üõë Stopping existing application..."
            
            if command -v pm2 >/dev/null 2>&1; then
              pm2 stop all 2>/dev/null || true
              pm2 delete all 2>/dev/null || true
            fi
            
            if [ -f app.pid ]; then
              PID=$(cat app.pid)
              if kill -0 $PID 2>/dev/null; then
                echo "Stopping application (PID: $PID)"
                kill -TERM $PID
                sleep 5
                if kill -0 $PID 2>/dev/null; then
                  kill -KILL $PID
                fi
              fi
              rm -f app.pid
            fi
            
            if [ ! -z "${{ secrets.EC2_PORT }}" ]; then
              PIDS=$(lsof -ti:${{ secrets.EC2_PORT }} 2>/dev/null || true)
              if [ ! -z "$PIDS" ]; then
                echo "Stopping processes on port ${{ secrets.EC2_PORT }}: $PIDS"
                echo "$PIDS" | xargs -r kill -TERM
                sleep 3
                echo "$PIDS" | xargs -r kill -KILL 2>/dev/null || true
              fi
            fi
            
            echo "‚úÖ Cleanup completed"
          '

      - name: Determine Start Command
        id: start-cmd
        run: |
          echo "start_command=npm run dev" >> $GITHUB_OUTPUT
          echo "Using 'npm run dev' as start command"

      - name: Start Application
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            
            mkdir -p logs
            
            echo "üöÄ Starting application..."
            echo "Command: ${{ steps.start-cmd.outputs.start_command }}"
            
            echo "$(date): Starting application with command: ${{ steps.start-cmd.outputs.start_command }}" > logs/deploy.log
            
            nohup bash -c "
              ${{ steps.start-cmd.outputs.start_command }} >> logs/app.log 2>> logs/app.error.log
            " > /dev/null 2>&1 &
            
            APP_PID=$!
            echo $APP_PID > app.pid
            
            echo "Application started with PID: $APP_PID"
            echo "$(date): Application started with PID: $APP_PID" >> logs/deploy.log
            
            sleep 3
            if kill -0 $APP_PID 2>/dev/null; then
              echo "‚úÖ Initial process check passed"
            else
              echo "‚ùå Process died immediately"
              echo "=== Error Log ==="
              if [ -f logs/app.error.log ]; then
                tail -20 logs/app.error.log
              fi
              exit 1
            fi
          '
        
      - name: Deployment Summary
        if: always()
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            
            echo "üìä Deployment Summary"
            echo "===================="
            
            if [ -f logs/deploy.log ]; then
              echo "=== Deployment Log ==="
              cat logs/deploy.log
            fi
            
            echo "=== Current Status ==="
            if [ -f app.pid ]; then
              PID=$(cat app.pid)
              if kill -0 $PID 2>/dev/null; then
                echo "‚úÖ Application is running (PID: $PID)"
                
                if [ ! -z "${{ secrets.EC2_PORT }}" ]; then
                  if netstat -ln 2>/dev/null | grep ":${{ secrets.EC2_PORT }}" > /dev/null; then
                    echo "‚úÖ Listening on port ${{ secrets.EC2_PORT }}"
                  else
                    echo "‚ö†Ô∏è Not listening on expected port"
                  fi
                fi
              else
                echo "‚ùå Application is not running"
              fi
            else
              echo "‚ùå No PID file found"
            fi
          '
